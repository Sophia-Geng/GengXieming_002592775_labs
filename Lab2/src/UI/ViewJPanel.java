
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Model.VitalSign;
import Model.VitalSignHistory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DELL
 */

public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    VitalSignHistory history;
    public ViewJPanel(VitalSignHistory vsh) {
        initComponents();
        this.history=vsh;
        
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblVital = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        fieldDate = new javax.swing.JTextField();
        fieldTemperature = new javax.swing.JTextField();
        fieldBp = new javax.swing.JTextField();
        fieldPulse = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnView = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 255));
        setLayout(null);

        tblVital.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Temperature", "Blood Pressure", "Pulse", "Conscious Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblVital);
        jScrollPane1.setBounds(10, 70, 550, 260);
        add(jScrollPane1);

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 24)); // NOI18N
        jLabel1.setText("View Vital Sign History");
        jLabel1.setBounds(130, 30, 300, 30);
        add(jLabel1);

        jLabel2.setText("Date");
        jLabel2.setBounds(110, 430, 50, 20);
        add(jLabel2);

        jLabel3.setText("Temperature");
        jLabel3.setBounds(70, 470, 80, 20);
        add(jLabel3);

        jLabel4.setText("Blood Pressure");
        jLabel4.setBounds(60, 510, 90, 20);
        add(jLabel4);

        jLabel5.setText("Pulse");
        jLabel5.setBounds(110, 550, 50, 20);
        add(jLabel5);

        jLabel6.setText("Conscious Status");
        jLabel6.setBounds(50, 590, 100, 20);
        add(jLabel6);
        
        fieldDate.setBounds(200, 430, 180, 25);
        add(fieldDate);

        fieldTemperature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldTemperatureActionPerformed(evt);
            }
        });
        fieldTemperature.setBounds(200, 470, 180, 25);
        add(fieldTemperature);
        
        fieldBp.setBounds(200, 510, 180, 25);
        add(fieldBp);

        fieldPulse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldPulseActionPerformed(evt);
            }
        });
        fieldPulse.setBounds(200, 550, 180, 25);
        add(fieldPulse);
        
        lblStatus.setBounds(240, 590, 50, 20);
        add(lblStatus);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        btnDelete.setBounds(330, 360, 80, 30);
        add(btnDelete);

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        btnView.setBounds(80, 360, 80, 30);
        add(btnView);
    }// </editor-fold>//GEN-END:initComponents

    private void fieldTemperatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldTemperatureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldTemperatureActionPerformed

    private void fieldPulseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldPulseActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_fieldPulseActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow =tblVital.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(this, "Please select a row to delete", "Warning", JOptionPane.WARNING_MESSAGE);
     
        }
        DefaultTableModel model =(DefaultTableModel)tblVital.getModel();
        VitalSign selectedVital = (VitalSign)model.getValueAt(selectedRow,0);
        
        history.deleteVital(selectedVital);
        JOptionPane.showMessageDialog(this, "Vital Sign deletded","Success",JOptionPane.INFORMATION_MESSAGE);
        populateTable();
        
        
        fieldDate.setText("");
        fieldBp.setText("");
        fieldPulse.setText("");
        fieldTemperature.setText("");
        lblStatus.setText("");

        
        
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        int selectedRow=tblVital.getSelectedRow();
        if(selectedRow <0){
            JOptionPane.showMessageDialog(this, "Please select a row to view", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        DefaultTableModel model =(DefaultTableModel)tblVital.getModel();
        VitalSign selectedVital = (VitalSign)model.getValueAt(selectedRow,0);
        
        if(selectedVital !=null){
        fieldDate.setText(selectedVital.getDate());
        fieldTemperature.setText(String.valueOf(selectedVital.getTemperature()));
        fieldBp.setText(String.valueOf(selectedVital.getBloodPressure()));
        fieldPulse.setText(String.valueOf(selectedVital.getPulse()));
        
        if(selectedVital.isIsConcious()){
            lblStatus.setText("Yes");
        }else{
             lblStatus.setText("No");
        }
        
        }
    }//GEN-LAST:event_btnViewActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnView;
    private javax.swing.JTextField fieldBp;
    private javax.swing.JTextField fieldDate;
    private javax.swing.JTextField fieldPulse;
    private javax.swing.JTextField fieldTemperature;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTable tblVital;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
       DefaultTableModel model=(DefaultTableModel)tblVital.getModel();
       model.setRowCount(0);
       
       for (VitalSign vs:history.getHistory()){
           Object[] row=new Object[5];
           row[0]=vs;
           row[1]=vs.getTemperature();
           row[2]=vs.getBloodPressure();
           row[3]=vs.getPulse();
           row[4]=vs.isIsConcious();
           
           
           model.addRow(row);
       }
       
    }
}
